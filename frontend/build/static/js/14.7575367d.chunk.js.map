{"version":3,"sources":["pages/auth/Login.js"],"names":["Title","Typography","Login","useState","isFailed","setIsFailed","isLoading","setIsLoading","message","setMessage","api","useApi","savedEmail","getLoginEmail","savedPassword","getLoginPassword","tailLayout","wrapperCol","offset","span","gutter","xs","sm","md","lg","xl","src","style","width","height","className","level","marginBottom","type","showIcon","labelCol","name","initialValues","remember","onFinish","values","setLoginEmail","email","setLoginPassword","password","data","a","postLogin","results","console","log","statusCode","process","loginPageUrl","origin","window","location","href","postForm","Item","marginLeft","label","initialValue","rules","required","Password","valuePropName","htmlType","loading"],"mappings":"6VAQOA,EAASC,IAATD,MACQ,SAASE,IAAS,IAAD,EACEC,oBAAS,GADX,mBACvBC,EADuB,KACbC,EADa,OAEIF,oBAAS,GAFb,mBAEvBG,EAFuB,KAEZC,EAFY,OAGAJ,mBAAS,IAHT,mBAGvBK,EAHuB,KAGdC,EAHc,KAI1BC,EAAMC,cAEJC,EAAaC,cACbC,EAAgBC,cAUhBC,EAAa,CACjBC,WAAY,CACVC,OAAQ,EACRC,KAAM,KAgDV,OACE,6BAGC,kBAAC,IAAD,CAAKC,OAAQ,IACX,kBAAC,IAAD,CAAKC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAIC,GAAI,GAAIC,GAAI,IACtC,yBAAKC,IAAI,kCAAkCC,MAAO,CAACC,MAAO,OAAQC,OAAQ,WAE3E,kBAAC,IAAD,CAAMR,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,IACxC,yBAAKK,UAAU,aAExB,kBAAC9B,EAAD,CAAO+B,MAAM,KAAb,eACC3B,GAAc,kBAAC,IAAD,CAAKuB,MAxDG,CACnBK,aAAc,SAyDV,kBAAC,IAAD,CAAKb,KAAM,IACf,kBAAC,IAAD,CACAX,QAASA,EAETyB,KAAK,QACLC,UAAQ,MAKN,kBAAC,IAAD,iBApFW,CACbC,SAAU,CACRhB,KAAM,GAERF,WAAY,CACVE,KAAM,KA+EN,CAEAiB,KAAK,QACLC,cAAe,CACbC,UAAU,GAEZC,SAtEa,SAAAC,GACfjC,GAAa,GAEViC,EAAOF,WACRG,YAAcD,EAAOE,OACrBC,YAAiBH,EAAOI,WAG1B,IAAMC,EAAO,CACXH,MAAQF,EAAOE,MACfE,SAAUJ,EAAOI,WAGL,uCAAG,gCAAAE,EAAA,sEACKpC,EAAIqC,UAAUF,GADnB,UACXG,EADW,OAEfC,QAAQC,IAAIF,GAEOA,EAAdG,WACL5C,GAAa,GACa,MAAvByC,EAAQG,WANI,oBAOGC,GACZC,EAAe,KAEjBA,EAA2B,aAGzBC,EAASC,OAAOC,SAASF,OACzBC,OAAOC,SAASF,SAAWA,EAASD,EAd3B,mDAebE,OAAOC,SAASC,KAAOJ,EAfV,wBAkBbhD,GAAY,GACZI,EAAWuC,EAAQH,MAnBN,4CAAH,qDAuBda,IAoCE/B,MAAO,CAACC,MAAO,SAGf,kBAAC,IAAK+B,KAAN,CAAWhC,MAAO,CAACiC,WAAY,OAC7BC,MAAM,QACNzB,KAAK,QACL0B,aAAclD,EAGdmD,MAAO,CACL,CACEC,UAAU,EACVxD,QAAS,8BAMb,kBAAC,IAAD,OAGF,kBAAC,IAAKmD,KAAN,CACEE,MAAM,WACNzB,KAAK,WACL0B,aAAchD,EACdiD,MAAO,CACL,CACEC,UAAU,EACVxD,QAAS,iCAIb,kBAAC,IAAMyD,SAAP,OAGF,kBAAC,IAAKN,KAAN,iBAAe3C,EAAf,CAA2BoB,KAAK,WAAW8B,cAAc,YACvD,kBAAC,IAAD,qBAGF,kBAAC,IAAKP,KAAS3C,EACb,kBAAC,IAAD,CAAQiB,KAAK,UAAUkC,SAAS,SAASC,QAAS9D,GAC9CA,EAAqB,UAAV","file":"static/js/14.7575367d.chunk.js","sourcesContent":["import React, {useState} from 'react'\nimport { Row, Col, Form, Input, Button, Checkbox, Alert, Typography } from 'antd';\nimport 'antd/dist/antd.css';\nimport {getLoginEmail, setLoginEmail, getLoginPassword, setLoginPassword} from '../../helpers'\nimport './login.css';\n\nimport {useApi} from '../../context';\n\nconst {Title} = Typography;\nexport default function Login() {\n  const [isFailed, setIsFailed] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  let api = useApi()\n\n  const savedEmail = getLoginEmail();\n  const savedPassword = getLoginPassword();\n  const layout = {\n    labelCol: {\n      span: 8,\n    },\n    wrapperCol: {\n      span: 16,\n    },\n  };\n\n  const tailLayout = {\n    wrapperCol: {\n      offset: 8,\n      span: 16,\n    },\n  };\n\n  const marginBottom = {\n    marginBottom: '20px'\n  }\n\n  const onFinish = values => {\n    setIsLoading(true);\n\n    if(values.remember) {\n      setLoginEmail(values.email);\n      setLoginPassword(values.password);\n    }\n\n    const data = {\n      email : values.email,\n      password: values.password\n    }\n\n    const postForm = async() => {\n      let results = await api.postLogin(data);\n      console.log(results);\n\n      let {statusCode} = results;\n      setIsLoading(false);\n      if(results.statusCode === 200) {\n        let publicUrl = process.env.PUBLIC_URL;\n        let loginPageUrl = null;\n      \n          loginPageUrl = publicUrl + '/dashboard';\n        \n        \n        let origin = window.location.origin;\n        if (window.location.origin === origin + loginPageUrl) return;\n        window.location.href = loginPageUrl;\n      }\n      else{\n        setIsFailed(true);\n        setMessage(results.data)\n      }\n    }\n\n    postForm();\n  }\n\n  \n  return (\n    <div>\n      \n\n     <Row gutter={24}>\n       <Col xs={0} sm={0} md={12} lg={12} xl={12} >\n        <img src=\"https://via.placeholder.com/400\" style={{width: \"100%\", height: \"100%\"}} />\n       </Col>\n       <Col  xs={24} sm={24} md={12} lg={12} xl={12}>\n         <div className=\"container\">\n       \n<Title level=\"3\">Sudha Admin</Title>\n{isFailed &&  (<Row style={marginBottom}>\n        \n        <Col span={24} >\n    <Alert \n    message={message}\n  //   description={message}\n    type=\"error\"\n    showIcon\n  />\n  </Col>\n  </Row>)\n}\n      <Form\n      {...layout}\n      name=\"basic\"\n      initialValues={{\n        remember: true,\n      }}\n      onFinish={onFinish}\n      // onFinishFailed={onFinishFailed}\n      style={{width: '80%'}}\n    >\n             \n      <Form.Item style={{marginLeft: '0px'}}\n        label=\"Email\"\n        name=\"email\"\n        initialValue={savedEmail}\n        // onChange={(value) => console.log(value.target.value)}\n        // onValuesChange={(value)=> console.log('logging the value ' , value)}\n        rules={[\n          {\n            required: true,\n            message: 'Please input your email!',\n          },\n        ]}\n\n        \n      >\n        <Input />\n      </Form.Item>\n\n      <Form.Item\n        label=\"Password\"\n        name=\"password\"\n        initialValue={savedPassword}\n        rules={[\n          {\n            required: true,\n            message: 'Please input your password!',\n          },\n        ]}\n      >\n        <Input.Password />\n      </Form.Item>\n\n      <Form.Item {...tailLayout} name=\"remember\" valuePropName=\"checked\">\n        <Checkbox>Remember me</Checkbox>\n      </Form.Item>\n\n      <Form.Item {...tailLayout}>\n        <Button type=\"primary\" htmlType=\"submit\" loading={isLoading}>\n          {!isLoading? 'Login' : 'Loading'}\n        </Button>\n      </Form.Item>\n    </Form>\n  \n      \n         \n         </div>\n       </Col>\n     </Row>\n\n    \n    </div>\n  )\n}\n"],"sourceRoot":""}