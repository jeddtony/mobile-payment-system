{"version":3,"sources":["api/Api.js","context/apiContext.js","context/pageContext.js","helpers/timeHelper.js","helpers/localStorageHelper.js","App.js","serviceWorker.js","index.js"],"names":["apiUrl","process","headers","Accept","localStore","instance","axios","create","baseURL","timeout","processResult","response","statusCode","console","log","success","data","status","message","postLogin","loginData","post","then","res","user","_id","name","catch","error","createUser","a","results","topUpWallet","interceptors","use","origin","window","location","href","redirectToLogin","ApiContext","createContext","ApiProvider","children","useState","Api","Provider","value","useApi","context","useContext","undefined","Error","PageContext","PageProvider","isPageLoading","setPageLoading","isPageError","setPageError","isPageSuccess","setPageSuccess","messageContent","setMessage","usePageValue","formatDate","date","moment","format","keyWord","getLoginEmail","localStorage","getItem","setLoginEmail","email","setItem","setLoginPassword","password","getLoginPassword","setToken","token","getToken","setName","setUserId","id","Login","lazy","Dashboard","ViewUsers","CreateUser","UserDetail","ViewContacts","ViewBundles","ViewDebitTransactions","ViewCreditTransactions","App","basename","fallback","path","exact","component","Boolean","hostname","match","queryCache","QueryCache","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3f939d9c.chunk.js","sourcesContent":["import * as localStore from '../helpers/localStorageHelper'\n\nimport axios from 'axios';\n\nconst apiUrl = process.env.REACT_APP_API_URL ;\nconst headers = {\n    Accept: \"application/json\",\n    \"Content-Type\": \"application/json\",\n    // \"Content-Type\": \"multipart/form-data\",\n    'auth-token': `${localStore.getToken()}`\n  }\n\nconst instance = axios.create({\n    baseURL: apiUrl + \"admin/\",\n    timeout: 500000,\n    headers\n  });\n\n  instance.interceptors.response.use(function (response) {\n      response = {...response, status: 200, statusCode: 200};\n      return response;\n  }, function (error) {\n    console.log(error.response.status);\n    if(error.response.status === 401){\n      return redirectToLogin();\n    }\n      console.log(error);\n  });\nfunction redirectToLogin() {\n  let publicUrl = process.env.PUBLIC_URL;\n        let loginPageUrl = null;\n      \n          loginPageUrl = publicUrl + '/login';\n        \n        \n        let origin = window.location.origin;\n        if (window.location.origin === origin + loginPageUrl) return;\n        window.location.href = loginPageUrl;\n}\n\n\nfunction processResult (response) {\n    let {statusCode} = response;\n    console.log(response);\n    if(statusCode === 200) {\n      return {success: response.data.status, data: response.data.data, message: response.data.message};\n    } else if(statusCode === 500){\n      return {success: false, message: 'Cannot connect to the internet'}\n    } \n      return {success: response.data.status, message: response.data.message};\n   \n    \n}\n\n\nfunction postLogin(loginData) {\n\n\n    console.log(process.env.REACT_APP_API_URL);\n\n    return axios.post(apiUrl+'auth/login', loginData)\n      .then(res=> {\n          let {data} = res.data;\n        //   console.log(results);\n          localStore.setToken(data['auth-token']);\n          localStore.setUserId(data.user._id);\n        //   localStore.setExpiresAt(data.expiresin);\n          localStore.setName(data.user.name);\n        //   localStore.setRole(data.info.roles[0].id);\n          return {statusCode: 200, data: 'Success'}\n      }).catch(error => {\n          if(error.response) {\n            if (error.response.status === 401){\n              return {statusCode: 401, data: \"You are not an admin\"};\n            }\n             if( error.response.status == 422) {\n                 return {statusCode: 422, data: \"Email and password does not match any record\"}\n             }\n             else {\n              return {statusCode: 500, data: \"Error in internet connection\"} \n             }\n          }else {\n              console.log('an error ', error)\n              return {statusCode: 500, data: \"Error in internet connection\"}\n      }\n  \n    });\n    }\n\n\n    // USER MGT\n    async function createUser (data) {\n      let results = await instance.post('users/create', data);\n      return processResult(results);\n    }\n\n    async function topUpWallet (data) {\n      let results = await instance.post('wallet/topUp', data);\n      return processResult(results);\n    }\n\n  export {instance, postLogin, createUser, topUpWallet}","import React, {createContext, useContext, useState} from 'react';\nimport * as Api from '../api/Api';\n\nconst ApiContext = createContext();\n\nconst ApiProvider = ({children}) => {\n    const [restApi, setRestApi] = useState(Api);\n\n    return (\n        <ApiContext.Provider value={Api}>\n            {children}\n        </ApiContext.Provider>\n    )\n}\n\nconst useApi = () => {\n    const context = useContext(ApiContext);\n\n    if(context === undefined){\n        throw new Error('useApi must be used within a ApiProvider');\n    }\n\n    return context;\n}\n\nexport {ApiProvider, useApi}","import React, {createContext, useContext, useState} from 'react';\nimport PropTypes from 'prop-types';\n\nexport const PageContext = createContext();\n\nexport const PageProvider = ({children}) => {\n    const [isPageLoading, setPageLoading] = useState(false);\n    const [isPageError, setPageError] = useState(false);\n    const [isPageSuccess, setPageSuccess] = useState(false);\n    const [messageContent, setMessage] = useState('');\n\n    return (\n        <PageContext.Provider value={{isPageLoading, setPageLoading,\n            isPageError, setPageError,\n            isPageSuccess, setPageSuccess,\n            messageContent, setMessage}}\n        >\n            {children}\n        </PageContext.Provider>\n    )\n};\n\nexport const usePageValue = () => useContext(PageContext);\n\nPageProvider.propTypes = {\n    children: PropTypes.node.isRequired\n}\n\n\n","import moment from 'moment';\n\nexport function getCurrentDate() {\n    return moment.now();\n}\n\nexport function formatDate(date) {\n    return moment(date).format('MMM-Do-YY');\n}\n\nexport function formatDateAndTime(date) {\n    return moment(date).format(\" MMMM Do YYYY, hA\");\n}\n\nexport function getDuration(date) {\n    return moment(date).fromNow();\n}","const keyWord = 'AIRTIME';\nexport const getLoginEmail = () => {\n    return localStorage.getItem(keyWord+'_LOGIN_EMAIL');\n}\n\nexport const setLoginEmail = (email) => {\n    return localStorage.setItem(keyWord+'_LOGIN_EMAIL', email);\n}\n\nexport const setLoginPassword = (password) => {\n    return localStorage.setItem(keyWord+'_LOGIN_PASSWORD', password);\n}\n\nexport const getLoginPassword = () => {\n    return localStorage.getItem(keyWord+'_LOGIN_PASSWORD');\n}\n\nexport const setToken = (token) => {\n    localStorage.setItem(keyWord+'_TOKEN', token);\n}\n\nexport const getToken = () => {\n    return localStorage.getItem(keyWord+'_TOKEN');\n}\n\nexport const setEmail = (email) => {\n    localStorage.setItem(keyWord+'_EMAIL', email);\n}\n\nexport const getEmail = () => {\n    return localStorage.getItem(keyWord+'_EMAIL');\n}\n\nexport const setName = (name) => {\n    localStorage.setItem(keyWord+'_NAME', name);\n}\n\nexport const getName = ()=> {\n    return localStorage.getItem(keyWord + '_NAME');\n}\n\nexport const setUserId = (id) => {\n    localStorage.setItem(keyWord + '_USER_ID', id);\n}\n\nexport const getUserId = ()=> {\n    return localStorage.getItem(keyWord + '_USER_ID');\n}","import React, { Suspense, lazy, useContext } from \"react\";\nimport './App.css';\nimport {getToken} from './helpers';\nimport { BrowserRouter, Route, Switch, Redirect } from \"react-router-dom\";\nconst Login = lazy(() => import(\"./pages/auth/Login\"));\nconst Dashboard = lazy(() => import(\"./pages/dashboard/Dashboard\"));\n\n\n//================ USERS ==========\nconst ViewUsers = lazy(() => import(\"./pages/users/ViewUsers\"));\nconst CreateUser = lazy(() => import(\"./pages/users/CreateUser\"));\nconst UserDetail = lazy(() => import(\"./pages/users/UserDetail\"));\n\n//================ CONTACTS ==========\nconst ViewContacts = lazy(() => import(\"./pages/contacts/ViewContacts\"));\n\n//================ BUNDLES ==========\nconst ViewBundles = lazy(() => import(\"./pages/dataBundles/ViewBundles\"));\n\n//================ TRANSACTIONS ==========\nconst ViewDebitTransactions = lazy(()=> import(\"./pages/transactions/ViewDebitTransactions\"));\nconst ViewCreditTransactions = lazy(() => import(\"./pages/transactions/ViewCreditTransactions\"));\n\n\nfunction App() {\n  const baseUrl = process.env.PUBLIC_URL;\n\n  return (\n    <BrowserRouter basename={baseUrl}>\n     <Suspense fallback={<div>Loading...</div>}>\n     <Switch>\n       <Route path=\"/\" exact component={Login} />\n       <Route path=\"/login\" exact component={Login} />\n       <Route path=\"/dashboard\" component={Dashboard} />\n       <Route path=\"/users\" exact component={ViewUsers} />\n       <Route path=\"/users/create\" component={CreateUser} />\n       <Route path=\"/users/:id\" component={UserDetail} />\n\n       <Route path=\"/contacts\" component={ViewContacts} />\n\n        <Route path=\"/networks/:name\" component={ViewBundles}/>\n\n        <Route path=\"/transactions/debit\" component={ViewDebitTransactions} />\n\n        <Route path=\"/transactions/credit\" component={ViewCreditTransactions} />\n\n       </Switch>\n       </Suspense>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n\nconst Authenticated = ({childredn}) => {\n    let token = getToken();\n\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {ApiProvider, PageProvider} from './context';\nimport {QueryCache, ReactQueryCacheProvider} from 'react-query';\nimport { ReactQueryDevtools } from 'react-query-devtools';\n\nconst queryCache = new QueryCache();\n\nReactDOM.render(\n  <React.StrictMode>\n      <ApiProvider>\n        <PageProvider>\n    <ReactQueryCacheProvider queryCache={queryCache}>\n  \n    <App />\n    \n    </ReactQueryCacheProvider>\n    </PageProvider>\n    </ApiProvider>\n    {/* <ReactQueryDevtools initialIsOpen /> */}\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}